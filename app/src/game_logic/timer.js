define([], function () {
    
    'use strict';


    // ###############################################################################################################################################
    // ###  CONSTRUCTOR  #############################################################################################################################
    // ###############################################################################################################################################
    
    /**
     * The Timer class is ...
     * @class
     * @extends MotherModule
     * @memberof Namespace (e.g. Kalulu.Remediation)
     * @param parameter {Object} Description of the parameter
    **/
    function Timer () {

        this._elapsedTime = 0;

        this._startTime = null;
    }

    Timer.prototype.constructor = Timer;



    // ###############################################################################################################################################
    // ###  GETTERS & SETTERS  #######################################################################################################################
    // ###############################################################################################################################################


    Object.defineProperties(Timer.prototype, {
        
        /**
         * Description of the accessor
         * @type {boolean}
         * @memberof Namespace.Timer#
        **/
        elapsedTime: {
            get: function () {
                return this._elapsedTime/60000;
            }
        }
    });



    // ##############################################################################################################################################
    // ###  METHODS  ################################################################################################################################
    // ##############################################################################################################################################


    Timer.prototype.start = function start () 
    {
        this._startTime = Date.now();
    };

    Timer.prototype.stop = function stop () 
    {
        if (this._startTime === null) return;
        var lTime = Date.now() - this._startTime;
        this._elapsedTime += lTime;
    };

    return new Timer();
});